1.Pointers and Addresses
  Pointers เป็นตัวแปรที่ใช้เก็บค่าตำแหน่ง ในหน่วยความจำ
  ค่าของตำแหน่ง Addresses ในหน่วยความจำก็คือค่าจำนวนเต็มบวเริ่มจาก 0
  เข้าถึงหน่วยความจำ ผ่านตัวแปรจะเก็บข้อมูลประเภท int
  เช่น int c;
      int *p;
      p = &c;
  
#####################################################################

2.Pointer Operators
  & เรียกว่า address operator เป็น unary operator ต้องการเพียง 1 operand
  ใช้หาค่าในตำแหน่งในหน่วยความจำ ของ operand
  * เรียกว่า dereferencing operator ใช้ในการเข้าถึงข้อมูลในหน่วยความจำที่มีค่าเป็น operand

  #ฟังก์ชั่น scanf() เป็นการรับข้อมูลเข้ามาในโปรแกรม
          โดยถ้าเป็น int float ต้องใช้ & ด้วย

#####################################################################

3.Pointers กับ Arrays
  ชื่อตัวแปร Arrays บอกถึงค่า base address กล่าวคือ a จะให้ค่าตำแหน่งในหน่วยความจำ
  ที่ใช้เก็บข้อมูลตัวแรกใน Arrays
  a และ &a[0] มีค่าเท่ากัน
  *(a+i) และ a[i] เท่ากัน

#####################################################################

4.นิพจน์ pointer และการใช้ตัวดำเนินการ คนิตศาสตร์กับ pointer
  int v[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
  int *pv;
  pv = v;
  pv = pv + 2;
  printf("%d\n, pv - v);
  pv++;
  printf("%d\n, pv - v);
  สามารถ เป็น operand ให้กับนิพจน์เหล่นนี้ได้
  ทางคนิตศาสตร์
  กำหนดค่า
  เปรียบเทียบ

#####################################################################

5.การใช้pointer ชี้ไปที่ฟังก์ชั่น(Pointers to Functions)
  ใช้ตัวแปร pointer อ้างไปยังหน่วยความทรงจำ ของฟังก์ชั่น
  การใช้malloc()
  int *data;
  data = (int *)malloc(1000 * sizeof(int));
  พารามิเตอร์ของ malloc() จะเป็นจำนวน byte ที่ใช้ในการจองพื้นที่
  ส่งกลับไปเป็นหน่วยความจำ ที่จองไว
  การใช้free()
  free(data); เป็นหน่วยความจำที่ต้องการคืนพื่นที่ไห้ระบบ
